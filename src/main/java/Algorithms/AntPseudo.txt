Create pheromone matrix [num tasks][num employees] | every element initialised to same value

    pherMatx[i][j] stores the pheromone value of assigning task i to employee j
    Each task essentially has an array of the pheromone for each employee it can be assigned to

eg pher matrix[0] (Task 1) might be  0.2 | 0.3 | 0.4 | 0.1 | 0.6
where 0.2 is the pheromone strength of assigning T1 to E1, 0.3 is for T1 to E2. 

Create ant matrix [num ants][num Tasks] | use getInitialPopulation to randomly create a solution for each ant.
    
    each ant is a potential solution
    eg Amatx[x][j] = z; means that the x'th ant chose to assign task j to employee z+1. || z = 0 represents E1

METHOD: UPDATE PHEROMONE MATRIX
decayPheromone(pherMatx)
FOR each ant : ants
    solution = aMatx[i]
    Calculate cost for solution / check if zero - optimal found
    pheromone â‰ˆ 1/(Cost + 1) | may require + 1 to ensure not dividing by 0/ maybe not cause if cost is 0 we end early and use that solution
    
    Update pheromone matrix 
    FOR each task j in solution ( j = 0 represents T1)
        int emplIDX = solution[j];
        pherMatrix[j][emplIDX] += pheromone;
    END 
END 

METHOD: newAntPaths / update population
IMPORT pherMatx[][], AntMatrix[][]
EXPORT: N/A 

FOR i < numAnts
    FOR j < numTasks
        cumulative = 0;
        total = sumPheromone(pherMatx[j])
        r = rand * total
        FOR e < numEmployees
            cumulative += pherMatx[j][e]
            if(r < cumulative)
                antMatx[i][j] = e;
            ENDIF
        ENDFOR
    ENDFOR
ENDFOR


METHOD: sumPheromone
IMPORT pheromoneForTask[]
    for(double p : pheromoneForTask) 
        sum += p;
RETURN sum






WHAT DO I WANT TO OUTPUT
    file
- pheromone matrix every x iterations
- best solution : cost, iteration, 


Heuristic:
h(E(x), T(y)) = 

When an ant is choosing the employee for the specific task it is up to, they can only choose from pairings that don't result in breaking constraints
unless no such choice is available, then the next choice will be based entirely on pheromone. 

case: no choice is feasible but an employee has no more feasible pairings remaining


Test a basic heuristic function: order of priority skill level and skill type, available hours, deadline. 

employees with correct skill level and type -> score of 

3 choices: 

E1: skill level and type match, would be overworked by 10 hours, would have a deadline vio of 5
E2: dont match, not overworked, no deadline vio
E3: 